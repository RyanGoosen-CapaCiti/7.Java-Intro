Difference between git reset and git revert:
git reset: This command is used to move the branch pointer to a specific commit, effectively resetting the branch to that commit. It allows you to discard commits and modify the branch history. It has multiple modes (e.g., --soft, --mixed, --hard) that determine the extent of changes applied to the working directory and the staging area.
git revert: Unlike git reset, git revert is used to create a new commit that undoes the changes made in a previous commit. It effectively adds a new commit that reverses the changes introduced by the specified commit. Reverting is a safe way to undo commits as it doesn't modify the existing commit history.

When to use one over the other:
Use git reset when you want to modify the branch history, remove commits, or move the branch pointer. Be cautious when using git reset on shared branches, as it can cause conflicts for other users who have already based their work on the commits being reset.
Use git revert when you want to undo changes while preserving the commit history. It's a safer option for undoing commits on shared branches or when you want to maintain a clear and transparent history.

Difference between git merge and git rebase:
git merge: This command integrates changes from one branch into another branch. It combines the commit history of both branches, creating a new merge commit. By default, git merge performs a "fast-forward" merge if possible, which means it simply moves the branch pointer forward to the latest commit in the merged branch.
git rebase: This command moves or combines a sequence of commits to a new base commit. It essentially reapplies commits on top of a different commit, resulting in a linear commit history. It replays the commits from the current branch on top of the target branch.

When to use one over the other:
Use git merge when you want to combine the changes from multiple branches and preserve the original commit history. It's useful for merging feature branches into the main branch or integrating changes from a shared branch.
Use git rebase when you want to maintain a linear and cleaner commit history. It's helpful for integrating changes from a feature branch onto the main branch or updating your branch with the latest changes from another branch.

Difference between git stash pop and git stash apply:
git stash pop: This command restores the most recent stash and removes it from the stash list. It reverts the changes from the stash and applies them to the working directory and staging area.
git stash apply: This command restores the most recent stash but keeps it in the stash list. It reverts the changes from the stash and applies them to the working directory and staging area.

When to use one over the other:
Use git stash pop if you want to apply and remove the most recent stash in one go. This is useful when you're confident that you no longer need the stash after applying it.
Use git stash apply if you want to apply the most recent stash but keep it in the stash list. This allows you to apply the stash multiple times or apply it later to a different branch or situation.

Interactive mode when rebasing:
When rebasing interactively with the git rebase -i command, you can:
Reorder commits: Change the order of commits to create a new commit order.
Squash commits: Combine multiple commits into a single commit for a cleaner history.
Edit commits: Modify the commit message, make changes to the commit content, or split the commit into multiple smaller commits.
Skip or delete commits: Exclude certain commits from the rebased branch.
Execute other actions: The interactive mode provides additional options like editing, picking, or dropping commits.

Interactive rebasing allows you to have fine-grained control over the commit history and tailor it according to your needs, resulting in a more organized and meaningful history.

